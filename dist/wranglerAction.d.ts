import { z } from "zod";
import { PackageManager } from "./packageManagers";
import { info } from "./utils";
export type WranglerActionConfig = z.infer<typeof wranglerActionConfig>;
export declare const wranglerActionConfig: z.ZodObject<{
    WRANGLER_VERSION: z.ZodString;
    didUserProvideWranglerVersion: z.ZodBoolean;
    secrets: z.ZodArray<z.ZodString, "many">;
    workingDirectory: z.ZodString;
    CLOUDFLARE_API_TOKEN: z.ZodString;
    CLOUDFLARE_ACCOUNT_ID: z.ZodString;
    ENVIRONMENT: z.ZodString;
    VARS: z.ZodArray<z.ZodString, "many">;
    COMMANDS: z.ZodArray<z.ZodString, "many">;
    QUIET_MODE: z.ZodBoolean;
    PACKAGE_MANAGER: z.ZodString;
    WRANGLER_OUTPUT_DIR: z.ZodString;
    GITHUB_TOKEN: z.ZodString;
}, "strip", z.ZodTypeAny, {
    WRANGLER_VERSION: string;
    didUserProvideWranglerVersion: boolean;
    secrets: string[];
    workingDirectory: string;
    CLOUDFLARE_API_TOKEN: string;
    CLOUDFLARE_ACCOUNT_ID: string;
    ENVIRONMENT: string;
    VARS: string[];
    COMMANDS: string[];
    QUIET_MODE: boolean;
    PACKAGE_MANAGER: string;
    WRANGLER_OUTPUT_DIR: string;
    GITHUB_TOKEN: string;
}, {
    WRANGLER_VERSION: string;
    didUserProvideWranglerVersion: boolean;
    secrets: string[];
    workingDirectory: string;
    CLOUDFLARE_API_TOKEN: string;
    CLOUDFLARE_ACCOUNT_ID: string;
    ENVIRONMENT: string;
    VARS: string[];
    COMMANDS: string[];
    QUIET_MODE: boolean;
    PACKAGE_MANAGER: string;
    WRANGLER_OUTPUT_DIR: string;
    GITHUB_TOKEN: string;
}>;
declare function main(config: WranglerActionConfig, packageManager: PackageManager): Promise<void>;
declare function installWrangler(config: WranglerActionConfig, packageManager: PackageManager): Promise<void>;
declare function authenticationSetup(config: WranglerActionConfig): void;
declare function execCommands(config: WranglerActionConfig, packageManager: PackageManager, commands: string[], cmdType: string): Promise<void>;
declare function uploadSecrets(config: WranglerActionConfig, packageManager: PackageManager): Promise<void>;
declare function wranglerCommands(config: WranglerActionConfig, packageManager: PackageManager): Promise<void>;
export { authenticationSetup, execCommands, info, installWrangler, main, uploadSecrets, wranglerCommands, };
